# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:48:01+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import UploadFile

from models import QuoteResponse, Tags

app = MCPProxy(
    contact={
        'name': 'They Said So',
        'url': 'https://theysaidso.com/api/quote',
        'x-twitter': 'theysaidso',
    },
    description=" They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console add 'X-TheySaidSo-Api-Secret' header and add your api key as the header value. You can test and play with the API right here on this web page. For using the private end points and subscribing to the API please visit https://theysaidso.com/api.",
    termsOfService='https://theysaidso.com/terms#api',
    title='They Said So Quotes API',
    version='3.1',
    servers=[
        {'url': 'https://quotes.rest'},
        {'url': 'http://quotes.rest'},
        {'url': 'http://api01.quotes.rest'},
    ],
)


@app.get(
    '/qod',
    description=""" Gets `Quote of the Day`. Optional `category` param determines the category of returned quote of the day
 """,
    tags=['quote_category_management', 'quote_language_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_qod(category: Optional[str] = None, language: Optional[str] = 'en'):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/qod/categories',
    description=""" Gets a list of `Quote of the Day` Categories.
 """,
    tags=['quote_language_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_qod_categories(
    language: Optional[str] = 'en', detailed: Optional[bool] = False
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/qod/languages',
    description=""" Gets a list of supported languages for `Quote of the Day`. 
 """,
    tags=[
        'quote_management',
        'quote_association',
        'qshow_management',
        'quote_category_management',
        'quote_image_management',
        'quote_language_management',
        'quote_like_handling',
        'quote_search_handling',
        'quote_tag_handling',
    ],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_qod_languages():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/qshow',
    description=""" Delete a qshow.
 """,
    tags=[
        'quote_management',
        'quote_association',
        'qshow_management',
        'quote_category_management',
        'quote_image_management',
        'quote_language_management',
        'quote_like_handling',
        'quote_search_handling',
        'quote_tag_handling',
    ],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def delete_qshow(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/qshow',
    description=""" Gets a details about a qshow.
 """,
    tags=[
        'quote_management',
        'quote_association',
        'qshow_management',
        'quote_category_management',
        'quote_image_management',
        'quote_language_management',
        'quote_like_handling',
        'quote_search_handling',
        'quote_tag_handling',
    ],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_qshow(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/qshow',
    description=""" Update an existing qshow. """,
    tags=['quote_management', 'quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def patch_qshow(
    id: str,
    title: Optional[str] = None,
    description: Optional[str] = None,
    tags: Optional[Tags] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/qshow',
    description=""" Create and add a new qshow to your private collection. """,
    tags=['quote_management', 'quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def put_qshow(
    title: str, description: Optional[str] = None, tags: Optional[Tags] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/qshow/list',
    description=""" Get the list of Qshows in They Said So platform. """,
    tags=['quote_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_qshow_list(start: Optional[int] = 0, public: Optional[bool] = False):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/qshow/quotes',
    description=""" Get the quotes in a given Qshow. """,
    tags=['quote_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_qshow_quotes(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/qshow/quotes/add',
    description=""" Add a quote to a given Qshow. """,
    tags=['quote_management', 'quote_association'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_qshow_quotes_add(id: str, quoteid: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/qshow/quotes/remove',
    description=""" Remove a quote to a given Qshow. """,
    tags=['quote_association'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_qshow_quotes_remove(id: str, quoteid: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/quote',
    description=""" Delete a quote. The user needs to be the owner of the quote to be able to delete it.
 """,
    tags=['quote_management', 'quote_category_management', 'quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def delete_quote(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote',
    description=""" Gets a `Quote` with a given `id`. """,
    tags=[
        'quote_management',
        'quote_association',
        'quote_category_management',
        'quote_search_handling',
    ],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote(id: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/quote',
    description=""" Update a quote """,
    tags=['quote_management', 'quote_language_management', 'quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def patch_quote(
    id: str,
    quote: Optional[str] = None,
    author: Optional[str] = None,
    language: Optional[str] = 'en',
    tags: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote',
    description=""" Add a new quote to your private collection. Same as 'PUT' but added since some clients don't handle PUT well. """,
    tags=['quote_management', 'quote_language_management', 'quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote(
    quote: str,
    author: Optional[str] = None,
    tags: Optional[str] = None,
    language: Optional[str] = 'en',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/quote',
    description=""" Add a new quote to your private collection. """,
    tags=['quote_management', 'quote_language_management', 'quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def put_quote(
    quote: str,
    author: Optional[str] = None,
    tags: Optional[str] = None,
    language: Optional[str] = 'en',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/authors/popular',
    description=""" Gets a list of popular author names in the system. 
 """,
    tags=['quote_language_management', 'quote_search_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_authors_popular(
    language: Optional[str] = 'en',
    detailed: Optional[bool] = False,
    start: Optional[int] = 0,
    limit: Optional[int] = 5,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/authors/search',
    description=""" Gets a list of author names in the system. 
 """,
    tags=['quote_search_handling', 'quote_language_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_authors_search(
    query: Optional[str] = None,
    language: Optional[str] = 'en',
    detailed: Optional[bool] = False,
    start: Optional[int] = 0,
    limit: Optional[int] = 1,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/categories/popular',
    description=""" Gets a list of popular `Quote` Categories.
 """,
    tags=['quote_management', 'quote_search_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_categories_popular(start: Optional[int] = 0, limit: Optional[int] = 5):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/categories/search',
    description=""" Gets a list of `Quote` Categories matching the query string.
 """,
    tags=['quote_search_handling', 'quote_category_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_categories_search(
    query: Optional[str] = 0, start: Optional[int] = 0, limit: Optional[int] = 2
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/quote/dislike',
    description=""" Remove the disLike for the given Quote as a user of the API Key. """,
    tags=['quote_management', 'quote_association', 'qshow_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def delete_quote_dislike(quote_id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote/dislike',
    description=""" Dislike the given Quote as a user of the API Key. Same as `put` but a convenient alias for those clients that don't support `put` cleanly. """,
    tags=['quote_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote_dislike(quote_id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/quote/dislike',
    description=""" Dislike the given Quote as a user of the API Key. Some clients don't cleanly support `PUT`, in such scenarios use the `POST` version of this. """,
    tags=['quote_management', 'quote_association'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def put_quote_dislike(quote_id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/quote/image',
    description=""" Delete a quote image. The user needs to be the owner of the quote image to be able to delete it.
 """,
    tags=['quote_management', 'quote_association'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def delete_quote_image(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/image',
    description=""" Gets a Quote image for a given id. Response can be an image file as a binary or a base64 encoded contents wrapped in json. `TODO`
 """,
    tags=['quote_management', 'quote_search_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_image(id: str, binary: Optional[bool] = True):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/quote/image',
    description=""" Create a new quote image for a given quote. Choose background colors/images , choose different font styles and generate a beautiful quote image. Did you just had a feeling of being a god or what?!
 """,
    tags=['quote_image_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def put_quote_image(
    quote_id: str,
    bgimage_id: Optional[str] = 'theysaidso_default_background_image',
    bg_color: Optional[str] = None,
    font_id: Optional[str] = 'theysaidso_default_font',
    text_color: Optional[str] = None,
    text_size: Optional[str] = None,
    halign: Optional[str] = 'center',
    valign: Optional[str] = 'center',
    width: Optional[int] = None,
    height: Optional[int] = None,
    branding: Optional[bool] = False,
    include_transparent_layer: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/quote/image/background',
    description=""" Delete a background image file. The user needs to be the owner of the background image to be able to delete it.
 """,
    tags=['quote_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def delete_quote_image_background(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote/image/background',
    description=""" Add an image for use later as a quote background image. """,
    tags=['quote_image_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote_image_background(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/image/background/list',
    description=""" Lists background images in your private collection. 
 """,
    tags=['quote_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_image_background_list(start: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/image/background/search',
    description=""" Searches for a background image with a given tag. 
 """,
    tags=['quote_search_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_image_background_search(query: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote/image/background/tags/add',
    description=""" Add a tag to a given Image. """,
    tags=['quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote_image_background_tags_add(id: str, tags: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote/image/background/tags/remove',
    description=""" Remove a tag from a given Image. """,
    tags=['quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote_image_background_tags_remove(id: str, tags: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/quote/image/font',
    description=""" Delete a font file. The user needs to be the owner of the font to be able to delete it.
 """,
    tags=[
        'quote_management',
        'quote_association',
        'qshow_management',
        'quote_category_management',
        'quote_image_management',
        'quote_language_management',
        'quote_like_handling',
        'quote_search_handling',
        'quote_tag_handling',
    ],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def delete_quote_image_font(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote/image/font',
    description=""" Add a font file for use later in creating a quote image. This is essentially a `PUT` but not many clients handle PUT with binary stream i.e. a file, gracefully. """,
    tags=['quote_image_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote_image_font(file: UploadFile):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/image/font/list',
    description=""" Lists background images in your private collection. 
 """,
    tags=['quote_management', 'quote_category_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_image_font_list(start: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/image/font/search',
    description=""" Searches for a font with a given tag. 
 """,
    tags=['quote_search_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_image_font_search(query: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote/image/font/tags/add',
    description=""" Add a tag to a given font. """,
    tags=['quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote_image_font_tags_add(id: str, tags: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote/image/font/tags/remove',
    description=""" Remove a tag from a given Font. """,
    tags=['quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote_image_font_tags_remove(id: str, tags: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/image/search',
    description=""" Gets a Random Quote image. Optional `category` param determines the category of quote used in the image. Optional `author` param gets the quote image of a given author. 
 """,
    tags=['quote_category_management', 'quote_search_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_image_search(
    category: Optional[str] = None,
    author: Optional[str] = None,
    private: Optional[bool] = False,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/quote/like',
    description=""" Remove the Like for the given Quote as a user of the API Key. """,
    tags=['quote_management', 'quote_association', 'qshow_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def delete_quote_like(quote_id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote/like',
    description=""" Like the given Quote as a user of the API Key. Same as `PUT` but a convenient alias for those clients that don't support `PUT` cleanly. """,
    tags=['quote_management', 'quote_association'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote_like(quote_id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/quote/like',
    description=""" Like the given Quote as a user of the API Key. Some clients don't cleanly support `PUT`, in such scenarios use the `POST` version of this. """,
    tags=['quote_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def put_quote_like(quote_id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/list',
    description=""" Get the list of quotes in your private collection. """,
    tags=['quote_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_list(start: Optional[int] = 0, limit: Optional[int] = 10):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/random',
    description=""" Gets a `Random Quote`. When you are in a hurry this is what you call to get a random famous quote. """,
    tags=['quote_language_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_random(language: Optional[str] = 'en', limit: Optional[int] = 1):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/quote/search',
    description=""" Search for a `Quote` in They Said So platform. Optional `category` , `author`, `minlength`, `maxlength` params determines the filters applied while searching for the quote.  """,
    tags=['quote_search_handling', 'quote_category_management'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def get_quote_search(
    category: Optional[str] = None,
    author: Optional[str] = None,
    minlength: Optional[int] = 100,
    maxlength: Optional[int] = 300,
    query: Optional[str] = None,
    private: Optional[bool] = False,
    language: Optional[str] = 'en',
    limit: Optional[int] = 1,
    sfw: Optional[bool] = False,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote/tags/add',
    description=""" Add a tag to a given Quote. """,
    tags=['quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote_tags_add(id: str, tags: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/quote/tags/remove',
    description=""" Remove a tag from a given quote. """,
    tags=['quote_tag_handling'],
    security=[
        APIKeyHeader(name="X-TheySaidSo-Api-Secret"),
    ],
)
def post_quote_tags_remove(id: str, tags: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
