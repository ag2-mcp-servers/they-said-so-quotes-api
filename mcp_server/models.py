# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:48:01+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class NewQuote(BaseModel):
    author: Optional[str] = Field(None, description='Author name of quote.')
    quote: str = Field(..., description='The Quote.')
    tags: Optional[List[str]] = Field(None, description='Array of tags/categories.')


class Quote(NewQuote):
    id: str = Field(
        ...,
        description='Unique identifier representing a specific quote in theysaidso.com.',
    )
    image: Optional[str] = Field(
        None,
        description='Image URL that can be used for background to display this quote.',
    )
    length: Optional[int] = Field(None, description='Length of the quote string.')


class Contents(BaseModel):
    quotes: Optional[List[Quote]] = Field(None, description='List of quotes')


class QuoteResponse(BaseModel):
    contents: Optional[Contents] = None
    success: Optional[str] = Field(
        None, description='Metadata about this successful call'
    )


class Tags(RootModel[List[str]]):
    root: List[str]


class QuoteImageBackgroundPostRequest(BaseModel):
    image: bytes = Field(
        ...,
        description='Image file to add to your collection (png/jpg/gif are supported)',
    )
    tags: Optional[str] = Field(None, description='Optional comma separated tags')


class QuoteImageFontPostRequest(BaseModel):
    font: bytes = Field(
        ..., description='Font file to add to your collection (ttf/otf are supported)'
    )
    tags: Optional[str] = Field(None, description='Optional comma separated tags')


class QOD(Quote):
    date: str = Field(..., description='Date this quote of the day belongs to')
